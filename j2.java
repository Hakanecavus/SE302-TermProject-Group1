package org.group1;

import com.sun.xml.internal.ws.policy.privateutil.PolicyUtils;

import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import javax.swing.*;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.group1.BibTeXLibrary;
import org.group1.BibTeXUtil;
import org.group1.BibTeXObject;
import org.jbibtex.ParseException;

/**
 *
 * @author nevin
 */
public class j2 extends javax.swing.JFrame {

    javax.swing.JFrame frame;

    Map<String, String> headers;

    public j2(javax.swing.JFrame frame, TableModel tableModel) {
        headers = BibTeXUtil.getTableHeaders();

        initComponents();
        this.frame = frame;
        table.setModel(tableModel);
    }

    /**
     * Creates new form j2
     */
    public j2() {
        initComponents();

        DefaultTableModel tableModel = new DefaultTableModel(BibTeXUtil.entryFieldNames, 0);

        for (BibTeXObject entry: GUI.library.getListEntries()) {
            Object[] object = new Object[BibTeXUtil.entryFields.length];
            for (int j = 0; j < BibTeXUtil.entryFields.length; j++) {
                if (BibTeXUtil.entryFields[j].equals("type"))
                    object[j] = entry.getType();
                else if (BibTeXUtil.entryFields[j].equals("key"))
                    object[j] = entry.getKey();
                else
                    object[j] = entry.getField(BibTeXUtil.entryFields[j]);

            }
            tableModel.addRow(object);
        }

        tableModel.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent tableModelEvent) {
                if (table.getSelectedRow()>=0) {
                    try {
                        BibTeXObject object = GUI.library.getSingleEntry(table.getSelectedRow());
                        if (BibTeXUtil.getIdentifier(BibTeXUtil.entryFieldNames[table.getSelectedColumn()]).equals("type"))
                            object.setType((String) table.getValueAt(table.getSelectedRow(), table.getSelectedColumn()));
                        else if (BibTeXUtil.getIdentifier(BibTeXUtil.entryFieldNames[table.getSelectedColumn()]).equals("key"))
                            object.setKey((String) table.getValueAt(table.getSelectedRow(), table.getSelectedColumn()));
                        else {
                            object.addField(BibTeXUtil.getIdentifier(BibTeXUtil.entryFieldNames[table.getSelectedColumn()]),
                                    (String) table.getValueAt(table.getSelectedRow(), table.getSelectedColumn()));
                        }
                    } catch (ArrayIndexOutOfBoundsException ee){
                        ee.printStackTrace();
                    }
                }
            }
        });

        table.setModel(tableModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        helpbutton = new javax.swing.JLabel();
        save = new javax.swing.JLabel();
        importbutton = new javax.swing.JLabel();
        editbutton = new javax.swing.JLabel();
        trashbutton = new javax.swing.JLabel();
        searchfield = new javax.swing.JTextField();
        buttoncontainer = new javax.swing.JLabel();
        searchcontainer = new javax.swing.JLabel();
        search = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1526, 897));
        setResizable(false);
        setSize(new java.awt.Dimension(1526, 897));
        setState(897);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);

        helpbutton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/help.png"))); // NOI18N
        getContentPane().add(helpbutton);
        helpbutton.setBounds(210, 40, 50, 50);

        save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/savebutton.png"))); // NOI18N
        getContentPane().add(save);
        save.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    SaveMouseListener(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
        save.setBounds(590, 630, 214, 56);

        importbutton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/import.png"))); // NOI18N
        getContentPane().add(importbutton);
        importbutton.addMouseListener(new java.awt.event.MouseAdapter(){
            public void mouseClicked(java.awt.event.MouseEvent evt){
                try {
                    importButtonListener(evt);
                }
                catch (IOException e){
                    e.printStackTrace();
                } catch (ParseException e) {
                    e.printStackTrace();
                }

            }
        });

        importbutton.setBounds(160, 60, 50, 60);

        editbutton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/editicon.png"))); // NOI18N
        editbutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editbuttonMouseClicked(evt);
            }
        });
        getContentPane().add(editbutton);
        editbutton.setBounds(100, 30, 40, 60);

        trashbutton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/trashicon.png"))); // NOI18N
        trashbutton.setToolTipText("");
        trashbutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                trashbuttonMouseClicked(evt);
            }
        });
        getContentPane().add(trashbutton);
        trashbutton.setBounds(40, 70, 50, 40);

        searchfield.setBackground(new java.awt.Color(102, 102, 102));
        searchfield.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        searchfield.setForeground(new java.awt.Color(255, 255, 255));
        searchfield.setText("Search");
        searchfield.setToolTipText("");
        searchfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchfieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchfieldFocusLost(evt);
            }
        });
        searchfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchfieldActionPerformed(evt);
            }
        });
        getContentPane().add(searchfield);
        searchfield.setBounds(320, 40, 260, 60);

        buttoncontainer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/butoncontainer5.png"))); // NOI18N
        getContentPane().add(buttoncontainer);
        buttoncontainer.setBounds(10, 40, 268, 76);

        searchcontainer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/searchcontainer.png"))); // NOI18N
        getContentPane().add(searchcontainer);
        searchcontainer.setBounds(280, 40, 350, 60);

        search.setIcon(new javax.swing.ImageIcon(getClass().getResource("/searchbuttons.png"))); // NOI18N
        search.setText("jLabel3");
        getContentPane().add(search);
        search.setBounds(590, 30, 90, 80);

        table.setBackground(new java.awt.Color(153, 153, 153));
        table.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        table.setForeground(new java.awt.Color(255, 255, 255));

        table.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {},
                BibTeXUtil.entryFieldNames
        ));
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        table.setEditingColumn(9);
        table.setRowHeight(40);
        jScrollPane11.setViewportView(table);

        getContentPane().add(jScrollPane11);
        jScrollPane11.setBounds(130, 170, 1240, 410);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/background.png"))); // NOI18N
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 0, 1535, 873);

        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(30, 40, 190, 60);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents





    private void searchfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchfieldActionPerformed

    private void editbuttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editbuttonMouseClicked
        j1 newFrame = new j1 (this, table.getModel());
        newFrame.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_editbuttonMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (frame != null) {
            frame.setVisible(true);
        }
    }//GEN-LAST:event_formWindowClosing

    private void searchfieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchfieldFocusGained
        // TODO add your handling code here:
        if(searchfield.getText().equals("Search")){
            searchfield.setText("");}
    }//GEN-LAST:event_searchfieldFocusGained

    private void searchfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchfieldFocusLost
        // TODO add your handling code here:
        if(searchfield.getText().equals("")){
            searchfield.setText("Search");
        }
    }//GEN-LAST:event_searchfieldFocusLost

    private void trashbuttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_trashbuttonMouseClicked
        int rowIndex = table.getSelectedRow();
        if (rowIndex == -1) {
            return; // no row seleted
        }
        DefaultTableModel model = (DefaultTableModel) this.table.getModel();
        model.removeRow(rowIndex);
        GUI.library.removeFromListEntries(rowIndex);
    }//GEN-LAST:event_trashbuttonMouseClicked

    private void importButtonListener(java.awt.event.MouseEvent evt) throws IOException, ParseException {
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());

        int returnValue = jfc.showOpenDialog(null);
        // int returnValue = jfc.showSaveDialog(null);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = jfc.getSelectedFile();
            BibTeXLibrary library1 = BibTeXUtil.parse(selectedFile);
            DefaultTableModel model = (DefaultTableModel) this.table.getModel();
            for (BibTeXObject object : library1.getListEntries()) {
                //System.out.println(object.toString());
                model.addRow(new String[]{object.getFields().get("address"),object.getFields().get("annote"),object.getFields().get("author"),
                        object.getFields().get("booktitle"),object.getFields().get("chapter"),object.getFields().get("crossref"),
                        object.getFields().get("doi"),object.getFields().get("edition"),object.getFields().get("editor"),
                        object.getFields().get("eprint"),object.getFields().get("howpublished"),object.getFields().get("institution"),
                        object.getFields().get("journal"),object.getFields().get("key"),object.getFields().get("month"),
                        object.getFields().get("note"),object.getFields().get("number"),object.getFields().get("organization"),
                        object.getFields().get("pages"),object.getFields().get("publisher"),object.getFields().get("school"),
                        object.getFields().get("series"),object.getFields().get("title"),object.getFields().get("type"),object.getFields().get("url"),
                        object.getFields().get("volume"),object.getFields().get("year")
                });
                //model.addRow(new String[]{object.getFields().get("doi")});
                System.out.println(object.getFields().get("publisher"));
                System.out.println(object.getFields().get("author"));
            }

        }
    }
    private void SaveMouseListener(java.awt.event.MouseEvent evt) throws IOException {//GEN-FIRST:event_Plus1MouseClicked
        String fileName = JOptionPane.showInputDialog("Enter file name");
        if (fileName.toCharArray().length < 4) {
            JOptionPane.showMessageDialog(frame, "FILE NAME CAN NOT CONTAIN LESS THAN 4 CHARACTERS", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        else{
            if (fileName != null) {
                if (!fileName.substring(fileName.length() - 4).equals(".bib"))
                    fileName += ".bib";

                JFileChooser chooser = new JFileChooser();
                chooser.setDialogTitle("Export bibtex File");
                chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                chooser.setAcceptAllFileFilterUsed(false);
                if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {


                    File newFile = new File(chooser.getSelectedFile().toPath() + "/" + fileName);

                    GUI.library.setName(fileName);
                    BibTeXUtil.format(GUI.library, newFile);
                } else {
                    JOptionPane.showMessageDialog(frame, "NO SELECTION!", "INFO", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel buttoncontainer;
    private javax.swing.JLabel editbutton;
    private javax.swing.JLabel helpbutton;
    private javax.swing.JLabel importbutton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JLabel save;
    private javax.swing.JLabel search;
    private javax.swing.JLabel searchcontainer;
    private javax.swing.JTextField searchfield;
    private javax.swing.JTable table;
    private javax.swing.JLabel trashbutton;
    // End of variables declaration//GEN-END:variables
}
